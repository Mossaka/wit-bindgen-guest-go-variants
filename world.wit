interface imports {
	record r2 {
		c: u8
	}
	record ar {
		a: option<option<u32>>, 
		b: r2
	}
	
	option-roundtrip1: func(a: option<option<ar>>) -> option<option<ar>>
	option-roundtrip2: func(a: option<option<u32>>) -> option<option<u32>>
	option-roundtrip3: func(a: option<u32>) -> option<u32>
	option-roundtrip4: func(a: option<ar>) -> option<ar>
	// result-roundtrip: func(a: result<u32, u32>) -> result<u64, u8>

	// enum e1 { a, b }
	// roundtrip-enum: func(a: e1) -> e1

	// variant c1 { a(s32), b(s64) }
	// variant-c1: func(a: c1) -> c1

	// enum-error: func(a: u32) -> result<u32, e1>
	// empty-error: func(a: u32) -> result<u32>
}
interface exports {

	test-imports: func()

	record ar {
		a: u32
	}

	flags f1 { a, b }

	roundtrip-option1: func(a: option<option<u32>>) -> option<option<u32>>
	roundtrip-option2: func(a: option<ar>) -> option<ar>
	roundtrip-option3: func(a: option<u32>) -> option<u32>
	roundtrip-option4: func(a: option<f1>) -> option<f1>
	// roundtrip-result: func(a: result<ar>) -> result<ar>

	// enum e1 { a, b }
	// roundtrip-enum: func(a: e1) -> e1

	// variant c1 { a(s32), b(s64) }
	// variant-c1: func(a: c1) -> c1

	// enum-error: func(a: u32) -> result<u32, e1>
	// empty-error: func(a: u32) -> result<u32>
}

world variants {
	import imports: imports
	default export exports
}