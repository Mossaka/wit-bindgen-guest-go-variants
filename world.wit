interface imports {
	option-roundtrip: func(a: option<u32>) -> option<u8>
	result-roundtrip: func(a: result<u32, u32>) -> result<u64, u8>

	// enum e1 { a, b }
	// roundtrip-enum: func(a: e1) -> e1

	// variant c1 { a(s32), b(s64) }
	// variant-c1: func(a: c1) -> c1

	// enum-error: func(a: u32) -> result<u32, e1>
	// empty-error: func(a: u32) -> result<u32>
}
interface exports {

	test-imports: func()

	roundtrip-option: func(a: option<u32>) -> option<u32>
	roundtrip-result: func(a: result<u32, u32>) -> result<u64, u8>

	// enum e1 { a, b }
	// roundtrip-enum: func(a: e1) -> e1

	// variant c1 { a(s32), b(s64) }
	// variant-c1: func(a: c1) -> c1

	// enum-error: func(a: u32) -> result<u32, e1>
	// empty-error: func(a: u32) -> result<u32>
}

world variants {
	import imports: imports
	default export exports
}